
numero 1 a:
CREATE OR REPLACE PROCEDURE creator_produits()
	language plpgsql
AS $$
BEGIN 
	CREATE TABLE produits(
	id SERIAL PRIMARY KEY,
	nom VARCHAR(255) NOT NULL,
	prix DECIMAL(10,2) NOT NULL,
	quantite INT NOT NULL,
	creation TIMESTAMP,
	mise_a_jour TIMESTAMP);
END $$;
numero 1 b:
CREATE OR REPLACE FUNCTION validate_produits()
	RETURNS TRIGGER 
	language plpgsql
	AS $$
	
DECLARE 
	temp_product RECORD;
BEGIN

	  IF NEW.prix < 0 OR NEW.quantite < 0 THEN
        RAISE EXCEPTION 'Prix et quantite doivent être positifs ou zéro';
      END IF;
	
    SELECT INTO temp_product
    FROM produits
    WHERE nom = NEW.nom;
    
    IF FOUND THEN
        RAISE EXCEPTION 'Le nom du produit doit être unique';
    END IF;

	NEW.creation := NOW();
    NEW.mise_a_jour := NULL;
    
    RETURN NEW;
END $$;

CREATE TRIGGER validate_produits
BEFORE INSERT ON produits
FOR EACH ROW
EXECUTE FUNCTION validate_produits();

CREATE TRIGGER validate_produits
BEFORE INSERT ON produits
FOR EACH ROW
EXECUTE FUNCTION validate_produits();

INSERT INTO produits (nom, prix, quantite) VALUES ('Produit A', 10, 5);
INSERT INTO produits (nom, prix, quantite) VALUES ('Produit B', -10, 5);
INSERT INTO produits (nom, prix, quantite) VALUES ('Produit A', 10, 5);

numero 1 c:
CREATE OR REPLACE FUNCTION update_produits()
RETURNS TRIGGER
AS $$
BEGIN 
	NEW.mise_a_jour := NOW();
	RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_produits()
RETURNS TRIGGER
AS $$
BEGIN 
	NEW.mise_a_jour := NOW();
	RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_Update
BEFORE UPDATE ON produits
FOR EACH ROW
EXECUTE FUNCTION update_produits();

UPDATE produits
SET prix = 20.00
WHERE id = 1;

numero 2 a:
ALTER TABLE produits
ADD COLUMN supprime TIMESTAMP DEFAULT NULL;

CREATE OR REPLACE FUNCTION soft_delete_produits()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Intercepter la tentative de suppression et mettre à jour le champ 'supprime' avec la date et l'heure actuelles
    NEW.supprime := NOW();
    RETURN NULL; -- empêche la suppression réelle
END;
$$;

CREATE TRIGGER soft_delete_trigger
BEFORE DELETE ON produits
FOR EACH ROW
EXECUTE FUNCTION soft_delete_produits();


numero 2 b:

CREATE OR REPLACE FUNCTION produits_actifs()
RETURNS SETOF produits
LANGUAGE plpgsql
AS $$
BEGIN
   RETURN QUERY 
   SELECT * FROM produits WHERE supprime IS NULL;
END;
$$;

CREATE OR REPLACE FUNCTION produits_supprime()
RETURNS SETOF produits
LANGUAGE plpgsql
AS $$
BEGIN
   RETURN QUERY 
   SELECT * FROM produits WHERE supprime IS NOT NULL;
END;
$$;

CREATE OR REPLACE FUNCTION produits_tous()
RETURNS SETOF produits
LANGUAGE plpgsql
AS $$
BEGIN
   RETURN QUERY 
   SELECT * FROM produits;
END;
$$;

SELECT * FROM produits_actifs();
SELECT * FROM produits_supprime();
SELECT * FROM produits_tous();

numero 3:

CREATE OR REPLACE FUNCTION update_produit_quantite_on_sale()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE produits
    SET quantite = quantite - NEW.quantite
    WHERE id = NEW.id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_produit_quantite_on_achat()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE produits
    SET quantite = quantite + NEW.quantite
    WHERE id = NEW.id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_produit_quantite_on_adjustment()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE produits
    SET quantite = NEW.quantite
    WHERE id = NEW.id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER update_produit_after_sale
AFTER INSERT ON ventes
FOR EACH ROW
EXECUTE FUNCTION update_produit_quantite_on_sale();

CREATE TRIGGER update_produit_after_purchase
AFTER INSERT ON achats
FOR EACH ROW
EXECUTE FUNCTION update_produit_quantite_on_achat();

CREATE TRIGGER update_produit_after_adjustment
AFTER INSERT ON ajustements
FOR EACH ROW
EXECUTE FUNCTION update_produit_quantite_on_adjustment();



INSERT INTO ventes (id, quantite) VALUES (1, 5);


INSERT INTO achats (id, quantite) VALUES (1, 10);


INSERT INTO ajustements (id, quantite) VALUES (1, 20);
