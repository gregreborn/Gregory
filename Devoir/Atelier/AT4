numero1:

CREATE TABLE produits (
	id SERIAL PRIMARY KEY,
	nom VARCHAR(255),
	quantite INT,
	prix FLOAT(10)
)

CREATE TABLE transactions(
	id SERIAL PRIMARY KEY,
	quantite INT,
	FOREIGN KEY (id) REFERENCES produits (id),
	moment TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)

CREATE TABLE ventes(
)INHERITS (transactions);

CREATE TABLE achats(
)INHERITS (transactions);

CREATE TABLE ajustements(
)INHERITS (transactions);

INSERT INTO produits (nom, quantite, prix) VALUES ('PS4',12, 321);
INSERT INTO produits (nom, quantite, prix) VALUES ('DELL XP 15',24, 1269);
INSERT INTO produits (nom, quantite, prix) VALUES ('Z-FLIP 5',36, 1529);

numero2:
CREATE OR REPLACE PROCEDURE ajuster_quantite(IN produits_id INT, IN quantite_ajuster INT)
	language plpgsql
AS $$
BEGIN
	IF NOT EXISTS (SELECT 1 FROM produits WHERE id = produits_id) THEN 
		RAISE EXCEPTION 'The product with id % does not exist.', produit_id;
	END IF;
	
	INSERT INTO transactions
							(quantite)
	VALUES					(@quantite_ajuster);
	
	UPDATE produits	
	SET    quantite = quantite_ajuster 
	WHERE	id = produits_id;
END; 
$$;


CALL ajuster_quantite(1, 24);

numero 3:

CREATE OR REPLACE PROCEDURE ajouter_transaction(IN produits_id INT, IN quantite_acheter INT)
	language plpgsql
AS $$
BEGIN
	IF NOT EXISTS (SELECT 1 FROM produits WHERE id = produits_id) THEN
		RAISE EXCEPTION 'The product with id % doesnt exist.', produits_id;
	ELSIF (quantite_acheter > 0)THEN
		IF (quantite_acheter > (SELECT quantite FROM produits WHERE id = produits_id) ) THEN
			RAISE EXCEPTION 'Il ne reste pas assez de %', (SELECT nom FROM produits WHERE id = produits_id);
		END IF;
	ELSE 	quantite_acheter= -quantite_acheter;
	END IF;
	
	INSERT INTO ventes 
						(quantite)
	VALUES				(quantite_acheter);
	
	UPDATE produits	
	SET    quantite = quantite - quantite_acheter
	WHERE	id = produits_id;
END; 
$$;

CALL ajouter_transaction(3,12);

numero 4:

sql simple: SELECT SUM(produits.quantite*produits.prix) AS Prix_Total_inventaire FROM produits;
sql pure (fonction):

CREATE OR REPLACE FUNCTION valeur_inventaire()
	RETURNS DECIMAL(10, 2)
	LANGUAGE sql
AS $$
    SELECT SUM(quantite * prix) AS total_value 
FROM produits;
$$
numero 5:
fonction1:
CREATE OR REPLACE FUNCTION transactions_par_produit(produit_id INT)
	RETURNS TABLE (trans_id INT,quantite_val TEXT,trans_moment TIMESTAMP) 
	LANGUAGE plpgsql
AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM produits WHERE produits.id = produit_id) THEN
        RAISE NOTICE 'Le produit n''existe pas.';
        RETURN;
    END IF;
    RETURN QUERY 
    (
        SELECT ventes.id, ventes.quantite::TEXT, ventes.moment FROM ventes WHERE ventes.id = produit_id
        UNION ALL
        SELECT achats.id, (-achats.quantite)::TEXT, achats.moment FROM achats WHERE achats.id = produit_id
        UNION ALL
        SELECT ajustements.id, ('=' || ajustements.quantite)::TEXT, ajustements.moment FROM ajustements WHERE ajustements.id = pid
    ) ORDER BY 3;
END $$;


fonction2:
CREATE OR REPLACE FUNCTION transactions_par_produit(debut TIMESTAMP, fin TIMESTAMP)
	RETURNS TABLE (trans_id INT,quantite_val TEXT,trans_moment TIMESTAMP) 
	LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY 
    (
        SELECT ventes.id, ventes.quantite::TEXT, ventes.moment FROM ventes WHERE ventes.moment BETWEEN debut AND fin
        UNION ALL
        SELECT achats.id, (-achats.quantite)::TEXT, achats.moment FROM achats WHERE achats.moment BETWEEN debut AND fin
        UNION ALL
        SELECT ajustements.id, ('=' || ajustements.quantite)::TEXT, ajustements.moment FROM ajustements WHERE ajustements.moment BETWEEN debut AND fin
    ) ORDER BY 3;
END $$;

fonction3:
CREATE OR REPLACE FUNCTION transactions_par_produit(produit_id INT, debut TIMESTAMP, fin TIMESTAMP)
	RETURNS TABLE (trans_id INT,quantite_val TEXT,trans_moment TIMESTAMP) 
	LANGUAGE plpgsql 
AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM produits WHERE produits.id = produit_id) THEN
        RAISE NOTICE 'Le produit n''existe pas.';
        RETURN;
    END IF;
    RETURN QUERY 
    (
        SELECT ventes.id, ventes.quantite::TEXT, ventes.moment FROM ventes WHERE ventes.id = produit_id AND ventes.moment BETWEEN debut AND fin
        UNION ALL
        SELECT achats.id, (-achats.quantite)::TEXT, achats.moment FROM achats WHERE achats.id = produit_id AND achats.moment BETWEEN debut AND fin
        UNION ALL
        SELECT ajustements.id, ('=' || ajustements.quantite)::TEXT, ajustements.moment FROM ajustements WHERE ajustements.id = produit_id AND ajustements.moment BETWEEN debut AND fin
    ) ORDER BY 3;
END $$;
